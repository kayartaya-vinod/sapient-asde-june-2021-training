pipeline {
    agent any

    environment {
        ORG_NAME = ""
        APP_NAME = "email-service"
        APP_VERSION = "0.0.1-SNAPSHOT"
        APP_CONTEXT_ROOT = "./email-service"
        APP_LISTENING_PORT = "8090"
        TEST_CONTAINER_NAME = "ci-${APP_NAME}-${BUILD_NUMBER}"
        DOCKER_HUB = credentials("docker-credentials")
    }

    stages{

        stage('compile'){
            steps {
                dir("${APP_CONTEXT_ROOT}") {
                    echo 'compiling...'
                    bat 'mvn clean compile'
                }
            }
        }

        stage('unit test'){
            steps {
                dir("${APP_CONTEXT_ROOT}") {
                    echo 'unit tests...'
                    bat 'mvn test'
                    junit 'target/surefire-reports/*.xml'
                    jacoco execPattern: 'target/jacoco.exec'
                }
            }
        }

        stage('build'){
            steps {
                dir("${APP_CONTEXT_ROOT}") {
                    echo 'creating jar...'
                    bat 'mvn package -DskipTests=true'
                    archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                }
            }
        }

        // stage('dockerize'){
        //     steps {
        //         dir("${APP_CONTEXT_ROOT}") {
        //             echo 'creating docker image...'
        //             bat "docker build -t ${ORG_NAME}/${APP_NAME}:${APP_VERSION} -t ${ORG_NAME}/${APP_NAME}:latest ."
        //         }
        //     }
        // }

        // stage('docker test container'){
        //     steps {
        //         echo 'booting up docker test container...'
        //         bat "docker run -dp ${APP_LISTENING_PORT}:${APP_LISTENING_PORT} --name ${TEST_CONTAINER_NAME} --rm ${ORG_NAME}/${APP_NAME}:latest"
        //     }
        // }

        // stage('performance test'){
        //     steps {
        //         echo 'testing for performance...'
        //         bat "set path=%PATH%;D:\apache-jmeter-5.4.1\apache-jmeter-5.4.1\bin"
        //         bat "jmeter -n -t ./devops-demo.jmx -l ./target/devops-demo.jtl"
        //         archiveArtifacts artifacts: 'target/*.jtl', fingerprint: true
        //     }
        // }

       stage('Code inspection & quality gate') {
           steps {
                dir("${APP_CONTEXT_ROOT}") {
                    echo "run code inspection & check quality gate..."
                    withSonarQubeEnv('ci-sonarqube') {
                        bat "mvn sonar:sonar"
                    }
               }
               timeout(time: 10, unit: 'MINUTES') {
                   //waitForQualityGate abortPipeline: true
                   script  {
                       def qg = waitForQualityGate()
                       if (qg.status != 'OK' && qg.status != 'WARN') {
                           error "Pipeline aborted due to quality gate failure: ${qg.status}"
                       }
                   }
               }
           }
       }

        stage('publish docker image'){
            when {
                branch 'origin/release'
            }
            steps {
                echo 'publishing docker image to docker repository...'
                withDockerRegistry([ credentialsId: "${ORG_NAME}-docker-hub", url: "" ]) {
                    bat "docker push ${ORG_NAME}/${APP_NAME}:${APP_VERSION}"
                    bat "docker push ${ORG_NAME}/${APP_NAME}:latest"
                }
            }
        }
    }
    post {
        always {
            echo "removing docker test container..."
            // bat "docker stop ${TEST_CONTAINER_NAME}"
            echo "removing the workspace"
            cleanWs()
        }
    }
}